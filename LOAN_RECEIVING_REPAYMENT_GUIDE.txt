═══════════════════════════════════════════════════════════════════
  LOAN RECEIVING - Repayment Guide (বাংলায়)
═══════════════════════════════════════════════════════════════════

Loan Receiving মানে: আমরা loan নিয়েছি
এখন সেই loan ফেরত দিতে হবে (Repayment)


═══════════════════════════════════════════════════════════════════
1. LOAN RECEIVING PROCESS (যা আগে হয়ে গেছে)
═══════════════════════════════════════════════════════════════════

STEP 1: Loan Application (Done) ✅
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/receiving
   → Status: 'Pending'
   → Transaction create হয় না

STEP 2: Loan Approval (Done) ✅
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   PATCH /loans/:loanId/approve
   {
     "targetAccountId": "account_id"  // আমাদের কোন account এ money credit হবে
   }

   → Status: 'Active'
   → Transaction: CREDIT (আমাদের account এ money এসেছে)
   → Loan Amount: 50,000 টাকা
   → Remaining Amount: 50,000 টাকা


═══════════════════════════════════════════════════════════════════
2. LOAN REPAYMENT PROCESS (এখন এই process)
═══════════════════════════════════════════════════════════════════

STEP 3: Loan ফেরত দেওয়া (Repayment) 💰
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

✅ Endpoint: POST /loans/:loanId/repayment

✅ Request Body:
   {
     "amount": 10000,              // কত টাকা ফেরত দিচ্ছি
     "repaymentDate": "2024-01-15", // Repayment date
     "paymentMethod": "bank-transfer",
     "sourceAccountId": "account_id",  // আমাদের কোন account থেকে money debit হবে
     "notes": "First repayment installment",
     "createdBy": "user@email.com",
     "branchId": "main"
   }

✅ যা যা হবে (Automatic):
   1. Transaction create হবে (DEBIT - আমাদের account থেকে money বের হচ্ছে)
   2. Loan remainingAmount decrease হবে (50,000 - 10,000 = 40,000)
   3. Bank account balance decrease হবে
   4. Payment history record হবে
   5. Fully repaid হলে loan status 'Closed' হবে


═══════════════════════════════════════════════════════════════════
3. COMPLETE FLOW EXAMPLE
═══════════════════════════════════════════════════════════════════

SCENARIO: আমরা 50,000 টাকা loan নিয়েছি
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

DAY 1: Loan Approval
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   Loan Amount: 50,000 টাকা
   Status: Active
   Remaining: 50,000 টাকা
   Transaction: CREDIT 50,000 (আমাদের account এ এসেছে)
   → আমাদের account balance: +50,000 টাকা

DAY 30: Loan ফেরত দিলাম 10,000 টাকা
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/LOANRDH2508290001/repayment
   {
     "amount": 10000,
     "sourceAccountId": "our_account_id",  // আমাদের account থেকে debit
     "repaymentDate": "2024-01-30"
   }

   → Transaction: DEBIT 10,000 (আমাদের account থেকে বের হয়েছে)
   → Remaining: 50,000 - 10,000 = 40,000 টাকা
   → আমাদের account balance: -10,000 টাকা
   → Status: Active (still)

DAY 60: আরও 10,000 টাকা ফেরত দিলাম
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/LOANRDH2508290001/repayment
   {
     "amount": 10000,
     "sourceAccountId": "our_account_id"
   }

   → Transaction: DEBIT 10,000
   → Remaining: 40,000 - 10,000 = 30,000 টাকা
   → Status: Active (still)

DAY 90: Balance 30,000 টাকা ফেরত দিলাম (fully repaid)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/LOANRDH2508290001/repayment
   {
     "amount": 30000,
     "sourceAccountId": "our_account_id"
   }

   → Transaction: DEBIT 30,000
   → Remaining: 30,000 - 30,000 = 0 টাকা
   → Status: Closed (fully repaid) ✅
   → closedDate: 2024-03-30


═══════════════════════════════════════════════════════════════════
4. FRONTEND IMPLEMENTATION (কিভাবে ব্যবহার করবেন)
═══════════════════════════════════════════════════════════════════

LOAN REPAYMENT FORM:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

```javascript
const LoanRepaymentForm = ({ loanId, loanData, onRepaymentSuccess }) => {
  const [repaymentData, setRepaymentData] = useState({
    amount: '',
    repaymentDate: new Date().toISOString().split('T')[0],
    paymentMethod: 'bank-transfer',
    sourceAccountId: '',  // আমাদের কোন account থেকে money debit হবে
    notes: ''
  });

  const handleRepaymentSubmit = async (e) => {
    e.preventDefault();

    // Validation
    if (!repaymentData.amount || !repaymentData.sourceAccountId) {
      Swal.fire({
        title: 'Error!',
        text: 'Amount and Source Account are required',
        icon: 'error'
      });
      return;
    }

    const repaymentAmount = parseFloat(repaymentData.amount);
    const remainingAmount = parseFloat(loanData.remainingAmount || loanData.amount);

    // Check if repayment exceeds remaining
    if (repaymentAmount > remainingAmount) {
      Swal.fire({
        title: 'Error!',
        text: `Repayment amount (${repaymentAmount}) exceeds remaining amount (${remainingAmount})`,
        icon: 'error'
      });
      return;
    }

    try {
      const response = await axiosSecure.post(
        `/loans/${loanId}/repayment`,
        {
          amount: repaymentAmount,
          repaymentDate: repaymentData.repaymentDate,
          paymentMethod: repaymentData.paymentMethod,
          sourceAccountId: repaymentData.sourceAccountId,  // আমাদের account
          notes: repaymentData.notes,
          createdBy: userProfile?.email,
          branchId: userProfile?.branchId
        }
      );

      if (response.data.success) {
        if (response.data.repayment.isFullyRepaid) {
          Swal.fire({
            title: 'Loan Fully Repaid! 🎉',
            text: 'The loan has been fully repaid.',
            icon: 'success',
            confirmButtonColor: '#10B981'
          });
        } else {
          Swal.fire({
            title: 'Repayment Recorded! ✅',
            text: `Remaining amount: ${response.data.loan.remainingAmount} টাকা`,
            icon: 'success',
            confirmButtonColor: '#10B981'
          });
        }

        // Callback to refresh loan data
        if (onRepaymentSuccess) {
          onRepaymentSuccess(response.data);
        }
      }
    } catch (error) {
      Swal.fire({
        title: 'Error!',
        text: error.response?.data?.message || 'Repayment failed',
        icon: 'error',
        confirmButtonColor: '#EF4444'
      });
    }
  };

  return (
    <form onSubmit={handleRepaymentSubmit}>
      {/* Repayment Amount */}
      <div>
        <label>Repayment Amount *</label>
        <input
          type="number"
          name="amount"
          value={repaymentData.amount}
          onChange={(e) => setRepaymentData({...repaymentData, amount: e.target.value})}
          placeholder={`Remaining: ${loanData.remainingAmount || loanData.amount} টাকা`}
          max={loanData.remainingAmount || loanData.amount}
          required
        />
      </div>

      {/* Repayment Date */}
      <div>
        <label>Repayment Date *</label>
        <input
          type="date"
          name="repaymentDate"
          value={repaymentData.repaymentDate}
          onChange={(e) => setRepaymentData({...repaymentData, repaymentDate: e.target.value})}
          required
        />
      </div>

      {/* Source Bank Account (আমাদের account - money এইখান থেকে debit হবে) */}
      <div>
        <label>Source Account (Our Account) *</label>
        <select
          name="sourceAccountId"
          value={repaymentData.sourceAccountId}
          onChange={(e) => setRepaymentData({...repaymentData, sourceAccountId: e.target.value})}
          required
        >
          <option value="">Select Source Account</option>
          {bankAccounts
            .filter(acc => acc.status === 'Active' && !acc.isDeleted)
            .map(account => (
              <option key={account._id} value={account._id}>
                {account.bankName} - {account.accountNumber} 
                (Balance: {account.currentBalance} {account.currency})
              </option>
            ))
          }
        </select>
        <p className="text-sm text-gray-500">
          Money এই account থেকে debit হবে
        </p>
      </div>

      {/* Payment Method */}
      <div>
        <label>Payment Method *</label>
        <select
          name="paymentMethod"
          value={repaymentData.paymentMethod}
          onChange={(e) => setRepaymentData({...repaymentData, paymentMethod: e.target.value})}
          required
        >
          <option value="bank-transfer">Bank Transfer</option>
          <option value="cash">Cash</option>
          <option value="check">Check</option>
          <option value="mobile-banking">Mobile Banking</option>
        </select>
      </div>

      {/* Notes */}
      <div>
        <label>Notes</label>
        <textarea
          name="notes"
          value={repaymentData.notes}
          onChange={(e) => setRepaymentData({...repaymentData, notes: e.target.value})}
          placeholder="Repayment notes (optional)"
        />
      </div>

      {/* Submit Button */}
      <button type="submit">
        Record Repayment
      </button>
    </form>
  );
};
```


═══════════════════════════════════════════════════════════════════
5. IMPORTANT DIFFERENCES
═══════════════════════════════════════════════════════════════════

LOAN GIVING - Payment (Borrower Payment):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   Endpoint: POST /loans/:loanId/payment
   Transaction Type: CREDIT (আমাদের account এ money আসছে)
   Account Field: targetAccountId (কোন account এ credit হবে)
   - Borrower আমাদের কাছে payment দিচ্ছে

LOAN RECEIVING - Repayment (আমরা Loan ফেরত দিচ্ছি):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   Endpoint: POST /loans/:loanId/repayment
   Transaction Type: DEBIT (আমাদের account থেকে money বের হচ্ছে)
   Account Field: sourceAccountId (কোন account থেকে debit হবে)
   - আমরা loan ফেরত দিচ্ছি
   - আমাদের account balance check করতে হবে (sufficient balance)


═══════════════════════════════════════════════════════════════════
6. SUMMARY
═══════════════════════════════════════════════════════════════════

LOAN RECEIVING REPAYMENT FLOW:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

1. Loan Approval → POST /loans/:loanId/approve
   → Status: Active
   → Transaction: CREDIT (আমাদের account এ money এসেছে)
   → Remaining: 50,000 টাকা

2. Loan Repayment → POST /loans/:loanId/repayment
   → Transaction: DEBIT (আমাদের account থেকে money বের হচ্ছে)
   → Remaining: 40,000 টাকা (decrease)
   → Status: Active

3. Fully Repaid → POST /loans/:loanId/repayment
   → Transaction: DEBIT
   → Remaining: 0 টাকা
   → Status: Closed ✅


═══════════════════════════════════════════════════════════════════

এই process follow করলে Loan Receiving এর repayment সম্পূর্ণ track করতে পারবেন! 🎯

═══════════════════════════════════════════════════════════════════

