═══════════════════════════════════════════════════════════════════
  LOAN RECEIVING - Backend Code Requirements (বাংলায়)
═══════════════════════════════════════════════════════════════════

Loan Receiving এর জন্য যে যে Backend Endpoints তৈরি করতে হবে:


═══════════════════════════════════════════════════════════════════
1. LOAN APPROVAL ENDPOINT (Priority: High) ⚠️
═══════════════════════════════════════════════════════════════════

✅ Endpoint: PATCH /loans/:loanId/approve

✅ Purpose: Loan application approve করার জন্য (Pending → Active)

✅ Request Body:
   {
     "targetAccountId": "account_id",  // কোন account এ money credit হবে
     "approvedBy": "admin@email.com",
     "notes": "Approved after verification"
   }

✅ যা করতে হবে:
   1. Loan status 'Pending' থেকে 'Active' এ update করতে হবে
   2. Transaction create করতে হবে (CREDIT)
   3. Bank account balance update করতে হবে (credit)
   4. Loan status, approval date, approvedBy field update করতে হবে

✅ Response:
   {
     "success": true,
     "message": "Loan approved successfully",
     "loan": { ... },
     "transactionId": "TXN123456"
   }

✅ Important:
   - শুধুমাত্র 'Pending' status এর loan approve করা যাবে
   - targetAccountId অবশ্যই দিতে হবে
   - Transaction automatically create হবে


═══════════════════════════════════════════════════════════════════
2. LOAN REPAYMENT ENDPOINT (Priority: High) ⚠️
═══════════════════════════════════════════════════════════════════

✅ Endpoint: POST /loans/:loanId/repayment

✅ Purpose: Loan receiving এর loan ফেরত দেওয়ার জন্য

✅ Request Body:
   {
     "amount": 5000,              // Repayment amount
     "repaymentDate": "2024-01-15",
     "paymentMethod": "bank-transfer",
     "sourceAccountId": "account_id",  // কোন account থেকে money debit হবে
     "notes": "Partial repayment",
     "createdBy": "user@email.com",
     "branchId": "main"
   }

✅ যা করতে হবে:
   1. Loan remainingAmount check করতে হবে
   2. Transaction create করতে হবে (DEBIT - money going out)
   3. Bank account balance update করতে হবে (debit)
   4. Loan remainingAmount decrease করতে হবে
   5. Fully repaid হলে loan status 'Closed' করতে হবে

✅ Response:
   {
     "success": true,
     "message": "Loan repayment recorded successfully",
     "repayment": {
       "transactionId": "TXN123456",
       "amount": 5000,
       "remainingAmount": 45000,
       "isFullyRepaid": false
     },
     "loan": { ... }
   }

✅ Important:
   - শুধুমাত্র 'Active' status এর loan repayment করা যাবে
   - sourceAccountId অবশ্যই দিতে হবে (কোন account থেকে money debit হবে)
   - Payment endpoint থেকে আলাদা (এটা receiving loan এর জন্য)


═══════════════════════════════════════════════════════════════════
3. LOAN UPDATE ENDPOINT (Priority: Medium)
═══════════════════════════════════════════════════════════════════

✅ Endpoint: PATCH /loans/:loanId

✅ Purpose: Loan details update করার জন্য

✅ Request Body:
   {
     "status": "Active",           // Optional
     "interestRate": 12.5,         // Optional
     "duration": 24,               // Optional
     "notes": "Updated notes",     // Optional
     // ... অন্য editable fields
   }

✅ যা করতে হবে:
   1. Validation করতে হবে
   2. Allowed fields check করতে হবে
   3. updatedAt timestamp update করতে হবে
   4. Loan document update করতে হবে

✅ Restrictions:
   - status 'Closed' হলে update করা যাবে না
   - amount, loanId, createdAt update করা যাবে না
   - শুধুমাত্র allowed fields update করা যাবে


═══════════════════════════════════════════════════════════════════
4. LOAN REJECTION ENDPOINT (Priority: Low)
═══════════════════════════════════════════════════════════════════

✅ Endpoint: PATCH /loans/:loanId/reject

✅ Purpose: Loan application reject করার জন্য

✅ Request Body:
   {
     "rejectionReason": "Incomplete documents",
     "rejectedBy": "admin@email.com",
     "notes": "Need more information"
   }

✅ যা করতে হবে:
   1. Loan status 'Pending' থেকে 'Rejected' এ update করতে হবে
   2. rejectionReason, rejectedBy, rejectionDate save করতে হবে
   3. Transaction create হবে না (loan approved হয়নি)


═══════════════════════════════════════════════════════════════════
5. COMPLETE BACKEND IMPLEMENTATION REQUIREMENTS
═══════════════════════════════════════════════════════════════════

✅ এখন যা আছে:
   - POST /loans/receiving (loan application create)
   - GET /loans (all loans)
   - GET /loans/:id (specific loan)
   - POST /loans/:loanId/payment (loan giving payment)

❌ যা তৈরি করতে হবে:
   1. PATCH /loans/:loanId/approve (Priority: High)
   2. POST /loans/:loanId/repayment (Priority: High)
   3. PATCH /loans/:loanId (Priority: Medium)
   4. PATCH /loans/:loanId/reject (Priority: Low)


═══════════════════════════════════════════════════════════════════
6. LOAN RECEIVING WORKFLOW
═══════════════════════════════════════════════════════════════════

STEP 1: Loan Application (✅ Done)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/receiving
   → Loan create হয় status: 'Pending'
   → Transaction create হয় না

STEP 2: Loan Approval (❌ Need to Create)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   PATCH /loans/:loanId/approve
   → Loan status: 'Active'
   → Transaction create হয় (CREDIT)
   → Bank account balance increase হয়

STEP 3: Loan Repayment (❌ Need to Create)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/:loanId/repayment
   → Loan remainingAmount decrease হয়
   → Transaction create হয় (DEBIT)
   → Bank account balance decrease হয়
   → Fully repaid হলে loan status: 'Closed'


═══════════════════════════════════════════════════════════════════
7. DIFFERENCE: Payment vs Repayment
═══════════════════════════════════════════════════════════════════

LOAN GIVING - Payment Endpoint:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/:loanId/payment
   - Borrower আমাদের কাছে payment দিচ্ছে
   - Transaction Type: CREDIT (আমাদের account এ money আসছে)
   - targetAccountId (কোন account এ credit হবে)

LOAN RECEIVING - Repayment Endpoint:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   POST /loans/:loanId/repayment
   - আমরা loan ফেরত দিচ্ছি
   - Transaction Type: DEBIT (আমাদের account থেকে money বের হচ্ছে)
   - sourceAccountId (কোন account থেকে debit হবে)


═══════════════════════════════════════════════════════════════════
8. IMPLEMENTATION PRIORITY
═══════════════════════════════════════════════════════════════════

HIGH PRIORITY (Must Have):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   1. PATCH /loans/:loanId/approve
      → Loan application approve করার জন্য
      → Without this, loan receiving system কাজ করবে না

   2. POST /loans/:loanId/repayment
      → Loan ফেরত দেওয়ার জন্য
      → Without this, loan receiving এর repayment track করা যাবে না

MEDIUM PRIORITY (Should Have):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   3. PATCH /loans/:loanId
      → Loan details update করার জন্য
      → Useful for editing loan information

LOW PRIORITY (Nice to Have):
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   4. PATCH /loans/:loanId/reject
      → Loan application reject করার জন্য
      → Optional feature


═══════════════════════════════════════════════════════════════════
9. EXAMPLE CODE STRUCTURE (যা করতে হবে)
═══════════════════════════════════════════════════════════════════

LOAN APPROVAL ENDPOINT:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   1. Find loan by loanId
   2. Check loan status is 'Pending'
   3. Check loanDirection is 'receiving'
   4. Validate targetAccountId
   5. Generate transaction ID
   6. Create CREDIT transaction
   7. Update bank account balance (credit)
   8. Update loan status to 'Active'
   9. Save approvedBy, approvalDate
   10. Return success response

LOAN REPAYMENT ENDPOINT:
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
   1. Find loan by loanId
   2. Check loan status is 'Active'
   3. Check loanDirection is 'receiving'
   4. Validate amount (should not exceed remaining)
   5. Validate sourceAccountId
   6. Generate transaction ID
   7. Create DEBIT transaction
   8. Update bank account balance (debit)
   9. Update loan remainingAmount
   10. Check if fully repaid → update status to 'Closed'
   11. Return success response


═══════════════════════════════════════════════════════════════════
10. TESTING CHECKLIST
═══════════════════════════════════════════════════════════════════

✅ Test করতে হবে:
   [ ] Loan approval with valid loanId and targetAccountId
   [ ] Loan approval with invalid loanId (should fail)
   [ ] Loan approval for already approved loan (should fail)
   [ ] Loan approval transaction creation
   [ ] Loan approval bank account balance update
   [ ] Loan repayment with valid loanId and sourceAccountId
   [ ] Loan repayment with amount exceeding remaining (should fail)
   [ ] Loan repayment transaction creation
   [ ] Loan repayment bank account balance update
   [ ] Loan repayment fully paid scenario (status → Closed)
   [ ] Loan update with valid fields
   [ ] Loan update with restricted fields (should fail)


═══════════════════════════════════════════════════════════════════

SUMMARY: Loan Receiving এর জন্য 2টি High Priority endpoint তৈরি করতে হবে:
   1. Loan Approval Endpoint (PATCH /loans/:loanId/approve)
   2. Loan Repayment Endpoint (POST /loans/:loanId/repayment)

এগুলো তৈরি হলে Loan Receiving system সম্পূর্ণ transaction track করতে পারবে! 🎯

═══════════════════════════════════════════════════════════════════

